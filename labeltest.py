from collections import Counter

import matplotlib.pyplot as plt  # plt 用于显示图片

cellList = [[[0, 0], [256, 256]], [[256, 0], [512, 256]], [[512, 0], [768, 256]], [[768, 0], [1024, 256]],
            [[1024, 0], [1280, 256]], [[1280, 0], [1536, 256]], [[1536, 0], [1792, 256]], [[1792, 0], [2048, 256]],
            [[0, 256], [128, 384]], [[128, 256], [256, 384]], [[256, 256], [384, 384]], [[384, 256], [512, 384]],
            [[512, 256], [640, 384]], [[640, 256], [768, 384]], [[768, 256], [896, 384]], [[896, 256], [1024, 384]],
            [[1024, 256], [1152, 384]], [[1152, 256], [1280, 384]], [[1280, 256], [1408, 384]],
            [[1408, 256], [1536, 384]], [[1536, 256], [1664, 384]], [[1664, 256], [1792, 384]],
            [[1792, 256], [1920, 384]], [[1920, 256], [2048, 384]],
            [[0, 384], [128, 512]], [[128, 384], [256, 512]], [[256, 384], [384, 512]], [[384, 384], [512, 512]],
            [[512, 384], [640, 512]], [[640, 384], [768, 512]], [[768, 384], [896, 512]], [[896, 384], [1024, 512]],
            [[1024, 384], [1152, 512]], [[1152, 384], [1280, 512]], [[1280, 384], [1408, 512]],
            [[1408, 384], [1536, 512]], [[1536, 384], [1664, 512]], [[1664, 384], [1792, 512]],
            [[1792, 384], [1920, 512]], [[1920, 384], [2048, 512]],
            [[0, 512], [64, 576]], [[64, 512], [128, 576]], [[128, 512], [192, 576]], [[192, 512], [256, 576]],
            [[256, 512], [320, 576]], [[320, 512], [384, 576]], [[384, 512], [448, 576]], [[448, 512], [512, 576]],
            [[512, 512], [576, 576]], [[576, 512], [640, 576]], [[640, 512], [704, 576]], [[704, 512], [768, 576]],
            [[768, 512], [832, 576]], [[832, 512], [896, 576]], [[896, 512], [960, 576]], [[960, 512], [1024, 576]],
            [[1024, 512], [1088, 576]], [[1088, 512], [1152, 576]], [[1152, 512], [1216, 576]],
            [[1216, 512], [1280, 576]], [[1280, 512], [1344, 576]], [[1344, 512], [1408, 576]],
            [[1408, 512], [1472, 576]], [[1472, 512], [1536, 576]], [[1536, 512], [1600, 576]],
            [[1600, 512], [1664, 576]], [[1664, 512], [1728, 576]], [[1728, 512], [1792, 576]],
            [[1792, 512], [1856, 576]], [[1856, 512], [1920, 576]], [[1920, 512], [1984, 576]],
            [[1984, 512], [2048, 576]],
            [[0, 576], [64, 640]], [[64, 576], [128, 640]], [[128, 576], [192, 640]], [[192, 576], [256, 640]],
            [[256, 576], [320, 640]], [[320, 576], [384, 640]], [[384, 576], [448, 640]], [[448, 576], [512, 640]],
            [[512, 576], [576, 640]], [[576, 576], [640, 640]], [[640, 576], [704, 640]], [[704, 576], [768, 640]],
            [[768, 576], [832, 640]], [[832, 576], [896, 640]], [[896, 576], [960, 640]], [[960, 576], [1024, 640]],
            [[1024, 576], [1088, 640]], [[1088, 576], [1152, 640]], [[1152, 576], [1216, 640]],
            [[1216, 576], [1280, 640]], [[1280, 576], [1344, 640]], [[1344, 576], [1408, 640]],
            [[1408, 576], [1472, 640]], [[1472, 576], [1536, 640]], [[1536, 576], [1600, 640]],
            [[1600, 576], [1664, 640]], [[1664, 576], [1728, 640]], [[1728, 576], [1792, 640]],
            [[1792, 576], [1856, 640]], [[1856, 576], [1920, 640]], [[1920, 576], [1984, 640]],
            [[1984, 576], [2048, 640]],
            [[0, 640], [64, 704]], [[64, 640], [128, 704]], [[128, 640], [192, 704]], [[192, 640], [256, 704]],
            [[256, 640], [320, 704]], [[320, 640], [384, 704]], [[384, 640], [448, 704]], [[448, 640], [512, 704]],
            [[512, 640], [576, 704]], [[576, 640], [640, 704]], [[640, 640], [704, 704]], [[704, 640], [768, 704]],
            [[768, 640], [832, 704]], [[832, 640], [896, 704]], [[896, 640], [960, 704]], [[960, 640], [1024, 704]],
            [[1024, 640], [1088, 704]], [[1088, 640], [1152, 704]], [[1152, 640], [1216, 704]],
            [[1216, 640], [1280, 704]], [[1280, 640], [1344, 704]], [[1344, 640], [1408, 704]],
            [[1408, 640], [1472, 704]], [[1472, 640], [1536, 704]], [[1536, 640], [1600, 704]],
            [[1600, 640], [1664, 704]], [[1664, 640], [1728, 704]], [[1728, 640], [1792, 704]],
            [[1792, 640], [1856, 704]], [[1856, 640], [1920, 704]], [[1920, 640], [1984, 704]],
            [[1984, 640], [2048, 704]],
            [[0, 704], [64, 768]], [[64, 704], [128, 768]], [[128, 704], [192, 768]], [[192, 704], [256, 768]],
            [[256, 704], [320, 768]], [[320, 704], [384, 768]], [[384, 704], [448, 768]], [[448, 704], [512, 768]],
            [[512, 704], [576, 768]], [[576, 704], [640, 768]], [[640, 704], [704, 768]], [[704, 704], [768, 768]],
            [[768, 704], [832, 768]], [[832, 704], [896, 768]], [[896, 704], [960, 768]], [[960, 704], [1024, 768]],
            [[1024, 704], [1088, 768]], [[1088, 704], [1152, 768]], [[1152, 704], [1216, 768]],
            [[1216, 704], [1280, 768]], [[1280, 704], [1344, 768]], [[1344, 704], [1408, 768]],
            [[1408, 704], [1472, 768]], [[1472, 704], [1536, 768]], [[1536, 704], [1600, 768]],
            [[1600, 704], [1664, 768]], [[1664, 704], [1728, 768]], [[1728, 704], [1792, 768]],
            [[1792, 704], [1856, 768]], [[1856, 704], [1920, 768]], [[1920, 704], [1984, 768]],
            [[1984, 704], [2048, 768]],
            [[0, 768], [128, 896]], [[128, 768], [256, 896]], [[256, 768], [384, 896]], [[384, 768], [512, 896]],
            [[512, 768], [640, 896]], [[640, 768], [768, 896]], [[768, 768], [896, 896]], [[896, 768], [1024, 896]],
            [[1024, 768], [1152, 896]], [[1152, 768], [1280, 896]], [[1280, 768], [1408, 896]],
            [[1408, 768], [1536, 896]], [[1536, 768], [1664, 896]], [[1664, 768], [1792, 896]],
            [[1792, 768], [1920, 896]], [[1920, 768], [2048, 896]],
            [[0, 896], [128, 1024]], [[128, 896], [256, 1024]], [[256, 896], [384, 1024]], [[384, 896], [512, 1024]],
            [[512, 896], [640, 1024]], [[640, 896], [768, 1024]], [[768, 896], [896, 1024]], [[896, 896], [1024, 1024]],
            [[1024, 896], [1152, 1024]], [[1152, 896], [1280, 1024]], [[1280, 896], [1408, 1024]],
            [[1408, 896], [1536, 1024]], [[1536, 896], [1664, 1024]], [[1664, 896], [1792, 1024]],
            [[1792, 896], [1920, 1024]], [[1920, 896], [2048, 1024]]]  # w,h

cellList160 = [[[0, 512], [64, 576]], [[64, 512], [128, 576]], [[128, 512], [192, 576]], [[192, 512], [256, 576]],
               [[256, 512], [320, 576]], [[320, 512], [384, 576]], [[384, 512], [448, 576]], [[448, 512], [512, 576]],
               [[512, 512], [576, 576]], [[576, 512], [640, 576]], [[640, 512], [704, 576]], [[704, 512], [768, 576]],
               [[768, 512], [832, 576]], [[832, 512], [896, 576]], [[896, 512], [960, 576]], [[960, 512], [1024, 576]],
               [[1024, 512], [1088, 576]], [[1088, 512], [1152, 576]], [[1152, 512], [1216, 576]],
               [[1216, 512], [1280, 576]], [[1280, 512], [1344, 576]], [[1344, 512], [1408, 576]],
               [[1408, 512], [1472, 576]], [[1472, 512], [1536, 576]], [[1536, 512], [1600, 576]],
               [[1600, 512], [1664, 576]], [[1664, 512], [1728, 576]], [[1728, 512], [1792, 576]],
               [[1792, 512], [1856, 576]], [[1856, 512], [1920, 576]], [[1920, 512], [1984, 576]],
               [[1984, 512], [2048, 576]],
               [[0, 576], [64, 640]], [[64, 576], [128, 640]], [[128, 576], [192, 640]], [[192, 576], [256, 640]],
               [[256, 576], [320, 640]], [[320, 576], [384, 640]], [[384, 576], [448, 640]], [[448, 576], [512, 640]],
               [[512, 576], [576, 640]], [[576, 576], [640, 640]], [[640, 576], [704, 640]], [[704, 576], [768, 640]],
               [[768, 576], [832, 640]], [[832, 576], [896, 640]], [[896, 576], [960, 640]], [[960, 576], [1024, 640]],
               [[1024, 576], [1088, 640]], [[1088, 576], [1152, 640]], [[1152, 576], [1216, 640]],
               [[1216, 576], [1280, 640]], [[1280, 576], [1344, 640]], [[1344, 576], [1408, 640]],
               [[1408, 576], [1472, 640]], [[1472, 576], [1536, 640]], [[1536, 576], [1600, 640]],
               [[1600, 576], [1664, 640]], [[1664, 576], [1728, 640]], [[1728, 576], [1792, 640]],
               [[1792, 576], [1856, 640]], [[1856, 576], [1920, 640]], [[1920, 576], [1984, 640]],
               [[1984, 576], [2048, 640]],
               [[0, 640], [64, 704]], [[64, 640], [128, 704]], [[128, 640], [192, 704]], [[192, 640], [256, 704]],
               [[256, 640], [320, 704]], [[320, 640], [384, 704]], [[384, 640], [448, 704]], [[448, 640], [512, 704]],
               [[512, 640], [576, 704]], [[576, 640], [640, 704]], [[640, 640], [704, 704]], [[704, 640], [768, 704]],
               [[768, 640], [832, 704]], [[832, 640], [896, 704]], [[896, 640], [960, 704]], [[960, 640], [1024, 704]],
               [[1024, 640], [1088, 704]], [[1088, 640], [1152, 704]], [[1152, 640], [1216, 704]],
               [[1216, 640], [1280, 704]], [[1280, 640], [1344, 704]], [[1344, 640], [1408, 704]],
               [[1408, 640], [1472, 704]], [[1472, 640], [1536, 704]], [[1536, 640], [1600, 704]],
               [[1600, 640], [1664, 704]], [[1664, 640], [1728, 704]], [[1728, 640], [1792, 704]],
               [[1792, 640], [1856, 704]], [[1856, 640], [1920, 704]], [[1920, 640], [1984, 704]],
               [[1984, 640], [2048, 704]],
               [[0, 704], [64, 768]], [[64, 704], [128, 768]], [[128, 704], [192, 768]], [[192, 704], [256, 768]],
               [[256, 704], [320, 768]], [[320, 704], [384, 768]], [[384, 704], [448, 768]], [[448, 704], [512, 768]],
               [[512, 704], [576, 768]], [[576, 704], [640, 768]], [[640, 704], [704, 768]], [[704, 704], [768, 768]],
               [[768, 704], [832, 768]], [[832, 704], [896, 768]], [[896, 704], [960, 768]], [[960, 704], [1024, 768]],
               [[1024, 704], [1088, 768]], [[1088, 704], [1152, 768]], [[1152, 704], [1216, 768]],
               [[1216, 704], [1280, 768]], [[1280, 704], [1344, 768]], [[1344, 704], [1408, 768]],
               [[1408, 704], [1472, 768]], [[1472, 704], [1536, 768]], [[1536, 704], [1600, 768]],
               [[1600, 704], [1664, 768]], [[1664, 704], [1728, 768]], [[1728, 704], [1792, 768]],
               [[1792, 704], [1856, 768]], [[1856, 704], [1920, 768]], [[1920, 704], [1984, 768]],
               [[1984, 704], [2048, 768]],
               [[0, 768], [128, 896]], [[128, 768], [256, 896]], [[256, 768], [384, 896]], [[384, 768], [512, 896]],
               [[512, 768], [640, 896]], [[640, 768], [768, 896]], [[768, 768], [896, 896]], [[896, 768], [1024, 896]],
               [[1024, 768], [1152, 896]], [[1152, 768], [1280, 896]], [[1280, 768], [1408, 896]],
               [[1408, 768], [1536, 896]], [[1536, 768], [1664, 896]], [[1664, 768], [1792, 896]],
               [[1792, 768], [1920, 896]], [[1920, 768], [2048, 896]],
               [[0, 896], [128, 1024]], [[128, 896], [256, 1024]], [[256, 896], [384, 1024]], [[384, 896], [512, 1024]],
               [[512, 896], [640, 1024]], [[640, 896], [768, 1024]], [[768, 896], [896, 1024]],
               [[896, 896], [1024, 1024]],
               [[1024, 896], [1152, 1024]], [[1152, 896], [1280, 1024]], [[1280, 896], [1408, 1024]],
               [[1408, 896], [1536, 1024]], [[1536, 896], [1664, 1024]], [[1664, 896], [1792, 1024]],
               [[1792, 896], [1920, 1024]], [[1920, 896], [2048, 1024]]]  # w,h

import os
import cv2
import numpy as np

print(len(cellList160))

label_dir = '/home/kai/Desktop/Cityscapes/meta/label_imgsForTest/'
txtSave_dir = '/home/kai/Desktop/Cityscapes/meta/train160_6_1/'
if not os.path.exists(txtSave_dir):
    os.makedirs(txtSave_dir)
imagesList = os.listdir(label_dir)
# priority1 = [11, 12, 18, 17, 16, 15, 14, 13, 3, 4, 5, 9, 1, 2, 8, 0, 6, 7, 10]
# priority2 = [6, 7, 11, 12, 18, 17, 16, 15, 14, 13, 3, 4, 5, 2, 8, 10, 9, 1, 0]
priority = [3, 5, 4, 2, 1, 0]

def regionSearch(subImage, priority):
    cell_Label = np.zeros(6, dtype=int)
    flag = np.zeros(6, dtype=int)
    subColor = []
    for y in range(subImage.shape[0]):
        for x in range(subImage.shape[1]):
            temp = subImage[y][x]
            # if not (
            #         temp == 0 or temp == 1 or temp == 2 or temp == 3 or temp == 4 or temp == 5 or temp == 6 or temp == 9 or temp == 10 or temp == 14 or temp == 15 or temp == 16 or temp == 18 or temp == 29 or temp == 30):
            subColor.append(temp)
    counterResult = Counter(subColor)
    # print(emptyImg[y][x])
    print(counterResult)
    exit(0)
    if len(counterResult) != 0:
        for item in counterResult:
            # print(item, index_dict[item])
            # print(counterResult[item] /(subImage.shape[0] * subImage.shape[1]))
            if item != 19 and counterResult[item] / (subImage.shape[0] * subImage.shape[1]) > 0.01:
                # cellLabel[item] = 1
                # print(priority.index(item))
                if item == 0:
                    # cell_Label[0] = 1
                    flag[priority.index(0)] = 1
                if item == 1:
                    # cell_Label[1] = 1
                    flag[priority.index(1)] = 1
                if item == 2 or item == 3 or item == 4 or item == 5 or item == 8 or item == 9:
                    # cell_Label[2] = 1
                    flag[priority.index(2)] = 1
                if item == 11 or item == 12:
                    # cell_Label[3] = 1
                    flag[priority.index(3)] = 1
                if item == 13 or item == 14 or item == 15 or item == 16:
                    # cell_Label[4] = 1
                    flag[priority.index(4)] = 1
                if item == 17 or item == 18:
                    # cell_Label[5] = 1
                    flag[priority.index(5)] = 1
                # cell_Label[item] = 1
        #         flag[priority.index(item)] = 1
        # print(priority[np.argmax(flag)])
        if flag[np.argmax(flag)] != 0:
            cell_Label[priority[np.argmax(flag)]] = 1

    # print(counterResult)
    # print(cellLabel, np.argmax(flag))
    # print(flag)
    # newImg[index_dict[item]][iy][ix] = 1
    return cell_Label


for image in imagesList:
    imgPath = os.path.join("/home/kai/Desktop/Cityscapes/gtFine/val/lindau", "lindau_000049_000019_gtFine_labelIds.png")
    imgName = image.split('.')[0]
    print(imgPath)
    label_image = cv2.imread(imgPath, -1)
    plt.imshow(label_image)  # 显示图片
    plt.axis('off')  # 不显示坐标轴
    plt.show()
    # label_image = cv2.resize(label_image, (1024, 512))
    # label_image1 = label_image[512:1024, :]
    # plt.imshow(label_image1)  # 显示图片
    # plt.axis('off')  # 不显示坐标轴
    # plt.show()
    # exit()
    AllCellLabel = []
    for num_cell, cell in enumerate(cellList160):
        # print(cell[0][1],cell[1][1])
        # print(cell[0][0],cell[1][0])
        # print(label_image.shape)
        subimage = label_image[cell[0][1]:cell[1][1], cell[0][0]:cell[1][0]]
        # plt.imshow(subimage)  # 显示图片
        # plt.axis('off')  # 不显示坐标轴
        # plt.show()

        # exit(0)
        # print(num)
        # cv2.imshow('subimage', subimage)
        # cv2.imwrite('/home/kai/Desktop/Cityscapes/meta/' + imgName + '_' + str(cell[0][0])+'.png', subimage)

        cellLabel = regionSearch(subimage, priority)


        # AllCellLabel = AllCellLabel + cellLabel.tolist()
    # exit(0)
    np.savetxt(txtSave_dir + imgName + '.txt', AllCellLabel, fmt='%d')
    # print(AllCellLabel)
    # exit()

# imgPath = os.path.join(self.imagesPath, self.imagesList[index])
# labeledImgPath = os.path.join(self.annotationPath, self.imagesList[index])
# colorImage = cv2.imread(imgPath, -1)
# label_image = cv2.imread(labeledImgPath, -1)
# colorImage = cv2.resize(colorImage, (self.img_w, self.img_h), interpolation=cv2.INTER_NEAREST)  # (w,h)
# label_image = cv2.resize(label_image, (self.img_w, self.img_h), interpolation=cv2.INTER_NEAREST)  # (w,h)
# cellLabelImage = np.zeros(
#     (self.num_classes, int(self.img_h / self.cell_size_h), int(self.img_w / self.cell_size_w)),
#     np.uint8)  # (h,w,c)
# for y in range(0, label_image.shape[0], self.cell_size_h):
#     for x in range(0, label_image.shape[1], self.cell_size_w):
#         subImage = label_image[y:y + self.cell_size_h, x:x + self.cell_size_w]
#         self.regionSearch(subImage, int(y / self.cell_size_h), int(x / self.cell_size_w), cellLabelImage)
#
# if self.transform is not None:
#     colorImage = self.transform(colorImage)
# colorImage = colorImage / 255.0
# # img = img - np.array([0.485, 0.456, 0.406])
# # img = img / np.array([0.229, 0.224, 0.225])  # (shape: (256, 256, 3))
# colorImage = np.transpose(colorImage, (2, 0, 1))  # (shape: (3, 256, 256))
# colorImage = colorImage.astype(np.float32)
#
# # convert numpy -> torch:
# colorImage = torch.from_numpy(colorImage)  # (shape: (3, 256, 256))
# cellLabelImage = torch.from_numpy(cellLabelImage)  # (shape: (20, 14, 14))
# # cellLabelImage = torch.from_numpy(cellLabelImage)  # (shape: (75, 207))
# # cellLabel = np.transpose(cellLabelImage, (1, 2, 0))  # (shape: (207, 75, 20))
# # cellLabel = cellLabel.flatten()
# # cellLabel = torch.from_numpy(cellLabel)  # (shape: (207*75*20))
#
#
#
#
#
# # import cv2
# # img = cv2.imread('/home/kai/Desktop/Cityscapes/meta/imgsForTrain/aachen_000000_000019.png')
# # for i in cellList:
# #     img = cv2.rectangle(img, (i[0][0],i[0][1]),(i[1][0],i[1][1]), (0,255,0),2)
# # cv2.imwrite('cell.png', img)
#
#
# # cellList = [[[0, 0], [256, 256]], [[256, 0], [512, 256]], [[512, 0], [768, 256]], [[768, 0], [1024, 256]],
# #             [[1024, 0], [1280, 256]], [[1280, 0], [1536, 256]], [[1536, 0], [1792, 256]], [[1792, 0], [2048, 256]],
# #             [[0,256],[128,384]], [[128,256],[256,384]], [[256,256],[384,384]], [[384,256],[512,384]], [[512,256],[640,384]],[[640,256],[768,384]],[[768,256],[896,384]],[[896,256],[1024,384]],[[1024,256],[1152,384]],[[1152,256],[1280,384]],[[1280,256],[1408,384]],[[1408,256],[1536,384]],[[1536,256],[1664,384]],[[1664,256],[1792,384]],[[1792,256],[1920,384]],[[1920,256],[2048,384]],
# #             [[0,384],[128,512]], [[128,384],[256,512]], [[256,384],[384,512]], [[384,384],[512,512]], [[512,384],[640,512]],[[640,384],[768,512]],[[768,384],[896,512]],[[896,384],[1024,512]],[[1024,384],[1152,512]],[[1152,384],[1280,512]],[[1280,384],[1408,512]],[[1408,384],[1536,512]],[[1536,384],[1664,512]],[[1664,384],[1792,512]],[[1792,384],[1920,512]],[[1920,384],[2048,512]],
# #             [[0,512],[128,640]], [[128,512],[256,640]], [[256,512],[384,640]], [[384,512],[512,640]], [[512,512],[640,640]],[[640,512],[768,640]],[[768,512],[896,640]],[[896,512],[1024,640]],[[1024,512],[1152,640]],[[1152,512],[1280,640]],[[1280,512],[1408,640]],[[1408,512],[1536,640]],[[1536,512],[1664,640]],[[1664,512],[1792,640]],[[1792,512],[1920,640]],[[1920,512],[2048,640]],
# #             [[0,640],[128,704]], [[128,640],[256,704]], [[256,640],[384,704]], [[384,640],[512,704]], [[512,640],[640,704]],[[640,640],[768,704]],[[768,640],[896,704]],[[896,640],[1024,704]],[[1024,640],[1152,704]],[[1152,640],[1280,704]],[[1280,640],[1408,704]],[[1408,640],[1536,704]],[[1536,640],[1664,704]],[[1664,640],[1792,704]],[[1792,640],[1920,704]],[[1920,640],[2048,704]],
# #             [[0,704],[128,768]], [[128,704],[256,768]], [[256,704],[384,768]], [[384,704],[512,768]], [[512,704],[640,768]],[[640,704],[768,768]],[[768,704],[896,768]],[[896,704],[1024,768]],[[1024,704],[1152,768]],[[1152,704],[1280,768]],[[1280,704],[1408,768]],[[1408,704],[1536,768]],[[1536,704],[1664,768]],[[1664,704],[1792,768]],[[1792,704],[1920,768]],[[1920,704],[2048,768]],
# #             [[0,768],[128,896]], [[128,768],[256,896]], [[256,768],[384,896]], [[384,768],[512,896]], [[512,768],[640,896]],[[640,768],[768,896]],[[768,768],[896,896]],[[896,768],[1024,896]],[[1024,768],[1152,896]],[[1152,768],[1280,896]],[[1280,768],[1408,896]],[[1408,768],[1536,896]],[[1536,768],[1664,896]],[[1664,768],[1792,896]],[[1792,768],[1920,896]],[[1920,768],[2048,896]],
# #             [[0,896],[128,1024]], [[128,896],[256,1024]], [[256,896],[384,1024]], [[384,896],[512,1024]], [[512,896],[640,1024]],[[640,896],[768,1024]],[[768,896],[896,1024]],[[896,896],[1024,1024]],[[1024,896],[1152,1024]],[[1152,896],[1280,1024]],[[1280,896],[1408,1024]],[[1408,896],[1536,1024]],[[1536,896],[1664,1024]],[[1664,896],[1792,1024]],[[1792,896],[1920,1024]],[[1920,896],[2048,1024]]]
